{
    "contents" : "#' Calculates alpha diversity from multiple species occupancy data\n#'\n#' This function takes a data.frame with multiple presence absence-data from\n#' various species in different sites, covariates of each site to calculate\n#' occupancy, variables specific to sampling days to calculate probability of\n#' detection, and it calculates the alpha diversity for each site.\n#'\n#' @param pres a data.frame where rows are the sites and columns are a series of\n#' presence-absence observation from multiple species, every species needs to\n#' have the same number of observations.\n#' @param sitecov a data.frame where every row is a site, and every column is a\n#' measurement of that site, such as elevation or slope, this covariates are\n#' usually more constant.\n#' @param obscov a list where every element is a data frame with the daily\n#' covariates for each site, that is a measurement for each day, such as average\n#' temperature of a day, this covariates are usually very .\n#' @param spp the number of species in the pres data.frame\n#' @param form a formula in the format ~ obscov ~ sitcov, the first arguments\n#' will be used to calculate probability of detection and the second part the\n#' occupancy.\n#' @param index Diversity index, one of \"shannon\", \"simpson\" or \"invsimpson\".\n#' @return A list with the fitted models for each species and the calculated\n#' Alpha diversity for each site.\n#' @details\n#' This function fits the latent abundance mixture model described in Royle and\n#' Nichols (2003), to calculate the abundance of every species in each site, the\n#' using that abundance it calculates the alpha diversity index for each site\n#' based on that abundance.\n#' @examples\n#' data(\"BatOccu\")\n#' data(\"Dailycov\")\n#' data(\"sampling.cov\")\n#' diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,\n#' spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~\n#' Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +\n#' I(Burn.intensity.Canopy^2) + Burn.intensity.basal +\n#' I(Burn.intensity.basal^2))\n#' @seealso \\code{\\link[vegan]{diversity}}\n#' @export\n#' @importFrom vegan diversity\n#' @importFrom unmarked occuRN\n#' @importFrom unmarked unmarkedFrameOccu\n#' @importMethodsFrom unmarked predict\n#'\n\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n\ndiversityoccu<- function(pres, sitecov, obscov, spp, form, index = \"shannon\") {\n\n  secuencia <- c(1:spp)*(ncol(pres)/spp)\n  secuencia2<-secuencia-(secuencia[1]-1)\n\n  models <- list()\n  div <- list()\n\n  for(i in 1:length(secuencia)) {\n    models[[i]] <-c(secuencia2[i]:secuencia[i])\n    models[[i]] <- pres[, models[[i]]]\n    models[[i]] <- unmarkedFrameOccu(y = models[[i]], siteCovs = sitecov, obsCovs = obscov)\n    models[[i]] <- occuRN(form, models[[i]])\n    div[[i]] <- predict(models[[i]], type = \"state\", newdata = sitecov)$Predicted\n    div<- as.data.frame(div)\n    h<- diversity(div, index)\n  }\n\n  result <- list(Covs = sitecov, models = models, Diversity = h)\n  return(result)\n}\n\n# You need the suggested package for this function\nmy_fun <- function(a, b) {\n  if (!requireNamespace(\"pkg\", quietly = TRUE)) {\n    stop(\"Pkg needed for this function to work. Please install it.\",\n         call. = FALSE)\n  }\n}\n\n#' Find the best GLM model explaining the alpha divesity of the species\n#'\n#' This function takes a diversityoccu object and heuristically searches for the\n#' glm that best explains the alpha diversity of the modelled species.\n#'\n#' @param DivOcc is an object returned by the divesityoccu function of this\n#' package\n#' @param method The method to be used to explore the candidate set of models.\n#' If \"h\" an exhaustive screening is undertaken. If \"g\" the genetic algorithm is\n#' employed (recommended for large candidate sets). If \"l\", a very fast\n#' exhaustive branch-and-bound algorithm is used. Package leaps must then be\n#' loaded, and this can only be applied to linear models with covariates and no\n#' interactions.\n#' @param confsetsize\tThe number of models to be looked for, i.e. the size of\n#' the returned confidence set.\n#' @param squared, if FALSE (Default), only GLMs with linear components will be\n#' evaluated; If TRUE, GLMs with both linear and quadratic components will be evaluated.\n#' WARNING if squared is TRUE, the number of parameters duplicates and the models\n#' grow exponentially, this may result in to many variables for a CPU to compute.\n#' @return An object with the best fitted model, the coefficients of that model,\n#' a table with the top 5 fitted models ranked by AICc and the data used for the\n#' model\n#' @details\n#' This function fits every first order glm possible and ranks them by AICc.\n#' @examples\n#' #To fit and explore the only the linear components of the model\n#' data(\"BatOccu\")\n#' data(\"Dailycov\")\n#' data(\"sampling.cov\")\n#' x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,\n#' spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~\n#' Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +\n#' I(Burn.intensity.Canopy^2) + Burn.intensity.basal +\n#' I(Burn.intensity.basal^2))\n#' y <- model.diversity(x, method = \"g\")\n#' y$Table\n#' y\n#'\n#' #To add the quadratic components of models\n#'\n#' data(\"BatOccu\")\n#' data(\"Dailycov\")\n#' data(\"sampling.cov\")\n#' x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov[,1:8], obscov = Dailycov,\n#' spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~\n#' Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +\n#' I(Burn.intensity.Canopy^2) + Burn.intensity.basal +\n#' I(Burn.intensity.basal^2))\n#' y <- model.diversity(x, method = \"g\", squared = TRUE)\n#' y$Table\n#' y\n#'\n#' @seealso \\code{\\link[DiversityOccupancy]{diversityoccu}}\n#' @export\n#' @importFrom glmulti glmulti\n#' @importFrom glmulti weightable\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n\n\nmodel.diversity <- function(DivOcc, method = \"h\", confsetsize = 5, squared = FALSE){\n  A <- cbind(DivOcc$Diversity, DivOcc$Covs)\n  colnames(A)[1]<-\"Diversity\"\n  B <- paste(names(DivOcc$Covs), \"+\")\n  B <- toString(B)\n  B <- gsub(\",\", \" \", B)\n  if (squared == TRUE) {\n    C <- paste(\"I(\", names(DivOcc$Covs), \"^2) +\")\n    C <- toString(C)\n    C <- gsub (\",\", \" \", C)\n    B <- paste(\"Diversity ~\", B, C, collapse = \" \")\n  }\n  else if (squared == FALSE) {\n    B <- paste(\"Diversity ~\", B, collapse = \" \")\n  }\n\n  B <- as.formula(substr(B, 1, nchar(B)-1))\n  B <- glm(B, data = A)\n  D <- glmulti(B, level = 1, crit = \"aicc\", confsetsize = confsetsize, plotty = FALSE, method = method)\n  Best.model <- D@formulas[[1]]\n  Table <- weightable(D)\n  Table$Delta.AICc <- Table[,2]-Table[1,2]\n  d<-summary(glm(Best.model, data = A))\n  result <- list(Best_model = Best.model, Table = Table, coeff = d, dataset= A)\n  return(result)\n}\n\n# You need the suggested package for this function\nmy_fun <- function(a, b) {\n  if (!requireNamespace(\"pkg\", quietly = TRUE)) {\n    stop(\"Pkg needed for this function to work. Please install it.\",\n         call. = FALSE)\n  }\n}\n\n#' plot the response of the calculated alpha diversity to the change of a\n#' particular variable\n#'\n#' This function takes a model.diversity object and one of the variables used to\n#' predict the alpha diversity index, and makes a plot showing the response of\n#' the diversity index against the selected variable. This function automatically\n#' limits the values of that variable to the maximum and minimum values of the\n#' dataset.\n#' @param model A result from the model.diversity function.\n#' @param variable The variable of which the response is to be ploted.\n#' @return a ggplot object plotting the alpha diversity response to the selected\n#' variable.\n#' @examples\n#' data(\"BatOccu\")\n#' data(\"Dailycov\")\n#' data(\"sampling.cov\")\n#' x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,\n#' spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~\n#' Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +\n#' I(Burn.intensity.Canopy^2) + Burn.intensity.basal +\n#' I(Burn.intensity.basal^2))\n#' y <- model.diversity(x, method = \"g\")\n#' response.plot(y, Burn.intensity.soil)\n#' response.plot(y, Existing.vegetation)\n#' @export\n#' @importFrom ggplot2 ggplot\n#' @importFrom ggplot2 aes\n#' @importFrom ggplot2 geom_line\n#' @importFrom ggplot2 geom_ribbon\n#' @importFrom ggplot2 theme_bw\n#' @importFrom ggplot2 theme\n#' @importFrom ggplot2 element_line\n#' @importFrom ggplot2 element_blank\n#' @importFrom ggplot2 labs\n#' @author Derek Corcoran <derek.corcoran.barrios@gmail.com>\n\nresponse.plot<- function(model, variable){\n  a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))\n  colnames(a)<-colnames(model$dataset)\n  maxval<-apply(model$dataset,2,max)\n  minval<-apply(model$dataset,2,min)\n  newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])\n  a[colnames(a)== as.character(substitute(variable))] <- newdata\n  b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)\n  c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se), dependent = a[colnames(a)== as.character(substitute(variable))])\n  result <- ggplot(c, aes(x= c[,4], y = c[,1])) + geom_ribbon(aes(ymax= c[,2], ymin = c[,3]), fill = \"grey\") + geom_line() + theme_bw() + theme(axis.line = element_line(colour = \"black\"), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.border = element_blank(), panel.background = element_blank()) + labs(x = as.character(substitute(variable)), y = \"Diversity\")\n  return(result)\n}\n",
    "created" : 1452185973157.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4075800677",
    "id" : "F92EE754",
    "lastKnownWriteTime" : 1452480374,
    "path" : "~/Documents/DiversityOccu/R/DiversityOccu.R",
    "project_path" : "R/DiversityOccu.R",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_source"
}