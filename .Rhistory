dredge = TRUE, form = ~ 1 ~ 1)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ 1 ~ elev)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ 1 ~ Elev)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ 1 ~ RPR)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ 1 ~ Wetland)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ 1 ~ Wetland + Elev)
data("IslandBirds")
data("Daily_Cov")
data("siteCov")
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ 1 ~ Wetland)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2), dredge = TRUE)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
x <-batchoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2), dredge = TRUE)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
x <-batchoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
system.time(batchoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2), dredge = TRUE))
summary(x$models[[1]])
summary(x$models[[5]])
library(DiversityOccupancy)
?batchoccu
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ Wind ~ Elev)
library(DiversityOccupancy)
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ Wind ~ Elev)
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ Wind ~ 1)
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ Wind ~ 1)$fit
batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = FALSE, form = ~ Wind ~ 1)$fit
summary(batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = FALSE, form = ~ Wind ~ 1)$fit)
summary(batchoccu(pres = IslandBirds, sitecov = siteCov, obscov = Daily_Cov, spp = 13,
dredge = TRUE, form = ~ Wind ~ Wetland)$fit)
data("siteCov")
View(siteCov)
data("sampling.cov")
View(sampling.cov)
names(sampling.cov)
names(sampling.cov[,1:9])
library(rgdal)
library(raster)
#read rasters
PNF<- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/PNF.asc")
PNF<- raster(PNF)
riverdist <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/riverdist.asc")
Distance.to.water<-raster (riverdist)
roaddist <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/roaddist.asc")
Distance.to.road<-raster (roaddist)
Vegetation_existing <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/Vegetation_existing.asc")
Existing.vegetation <- raster(Vegetation_existing)
FireReturnAll <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/FireReturnAll.asc")
Fire.Interval<-raster (FireReturnAll)
topo <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/topo.asc")
topo <-raster (topo)
Altitude <-topo*PNF
bs <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/bs.asc")
Burn.intensity.soil<-raster (bs)
bc <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/bc.asc")
Burn.intensity.Canopy<-raster (bc)
bb <- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/bb.asc")
Burn.intensity.basal<-raster (bb)
plumas.stack <- stack(Distance.to.water, Distance.to.road, Existing.vegetation, Fire.Interval, Altitude, Burn.intensity.soil, Burn.intensity.Canopy, Burn.intensity.basal)
names(plumas.stack) <- names(sampling.cov[,1:8])
library(rgdal)
library(raster)
PNF<- readGDAL("~/new_bats/Rnew_bats/Bats_data_products/PNF.asc")
PNF<- raster(PNF)
Dailycov3 <- read.csv("~/Documents/new_bats/Rnew_bats/Bats_data_products/Dailycov3.csv")
View(Dailycov3)
library(rgdal)
library(raster)
#read rasters
PNF<- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/PNF.asc")
PNF<- raster(PNF)
riverdist <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/riverdist.asc")
Distance.to.water<-raster (riverdist)
roaddist <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/roaddist.asc")
Distance.to.road<-raster (roaddist)
Vegetation_existing <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/Vegetation_existing.asc")
Existing.vegetation <- raster(Vegetation_existing)
FireReturnAll <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/FireReturnAll.asc")
Fire.Interval<-raster (FireReturnAll)
topo <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/topo.asc")
topo <-raster (topo)
Altitude <-topo*PNF
bs <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/bs.asc")
Burn.intensity.soil<-raster (bs)
bc <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/bc.asc")
Burn.intensity.Canopy<-raster (bc)
bb <- readGDAL("~/Documents/new_bats/Rnew_bats/Bats_data_products/bb.asc")
Burn.intensity.basal<-raster (bb)
plumas.stack <- stack(Distance.to.water, Distance.to.road, Existing.vegetation, Fire.Interval, Altitude, Burn.intensity.soil, Burn.intensity.Canopy, Burn.intensity.basal)
names(plumas.stack) <- names(sampling.cov[,1:8])
plot(plumas.stack)
summary(plumas.stack)
summary(Burn.intensity.Canopy)
quantile(Burn.intensity.Canopy, 0.9)
quantile(Burn.intensity.Canopy, 0.5)
quantile(Altitude, 0.5)
quantile(Altitude, 0.9)
class(quantile(Altitude, 0.9))
quantile(plumas.stack, 0.9)
library(devtools)
devtools::use_data(plumas.stack, overwrite = TRUE)
quantile(plumas.stack, 0.75)
library(DiversityOccupancy)
data("plumas.stack")
plot(plumas.stack)
x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov[,1:8], obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
y <- model.diversity(x, method = "g", squared = TRUE)
y$Best_model
diversity.raster <- predict(y$Best_model, plumas.stack)
y$Best_model
y$Best_model
class(y$Best_model)
x$models
x$models[[1]]
class(x$models[[1]])
predict(x$models[[1]], plumas.stack)
predict(x$models[[1]], plumas.stack, type = "state")
n<-predict(x$models[[1]], plumas.stack, type = "state")
n
plot(n)
plot(n)$predicted
plot(n$predicted)
n$predicted
n$@redicted
n$@predicted
names(n)
names(n$Predicted)
plot(n$Predicted)
n$Predicted
quantile(n$Predicted, 0.9)
quantile(n$Predicted, 0.98)
quantile(n$Predicted, 0.99)
quantile(n$Predicted, 0.999999)
quantile(n$Predicted, 0.9)
s<- predict(glm(y$Best_model, data=y$dataset), plumas.stack)
glm(y$Best_model, data = y$dataset)
glm.model <- glm(y$Best_model, data = y$dataset)
plot(predict(glm.model, plumas.stack))
predict(object = plumas.stack, model = glm.model)
glm.model <- glm(y$Best_model, data = y$dataset)
s<- predict(object = plumas.stack, model = glm.model)
plot(glm.model)
plot(s)
quantile(s, 0.9)
?reclassify
m <- c(0, 0.25, 1,  0.25, 0.5, 2,  0.5, 1, 3)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rclmat
m <- c(0, 0.25, NA,  0.25, 0.5, 1,  0.5, 1, 2)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc <- reclassify(plumas.stack, rclmat)
rc
plot(rc)
rc <- reclassify(plumas.stack, rclmat)
reclassify(plumas.stack, rcl = rclmat)
m <- c(-INF, 0.25, NA,  0.25, 0.5, 1,  0.5, INF, 2)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
m <- c(-inf, 0.25, NA,  0.25, 0.5, 1,  0.5, inf, 2)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
m <- c(-Inf, 0.25, NA,  0.25, 0.5, 1,  0.5, Inf, 2)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
reclassify(plumas.stack, rcl = rclmat)
rc <- reclassify(plumas.stack, rclmat)
plot(reclassify(plumas.stack, rcl = rclmat))
plot(rc)
unstack(plumas.stack)
b <- overlay(unstack(rc), fun=function(a,b,c,d,e,f,g,h){return(a*b*c*d*e*f*g*h)} )
b <- overlay(unstack(unlist(rc)), fun=function(a,b,c,d,e,f,g,h){return(a*b*c*d*e*f*g*h)} )
class(unstack(unlist(rc))
)
class(unlist((unstack(rc)))
)
class(unlist((unstack(rc))))
class(unlist((unstack(rc))))
?unlist
?prod
prod(rc)
plot(prod(rc))
x$models
length(x$models)
length(x$models)[T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F]
length(x$models)[[T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F]]
length(x$models)[[T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F]]
(x$models)[[T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F]]
(x$models)[T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F]
(x$models)[c(T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F)]
a<-c(T,T,T,T,F,F,F,F,F,F,F,F,F,F,F,F,F)
(x$models)[a]
predict.diversity<- function(model, diverse, new.data, quantile = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:lenth(models)){
layers <- predict(models[[i]], new.data, type = "state")$predicted
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
result <- list(species = layers, diversity.raster = diversity.raster)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
predict.diversity<- function(model, diverse, new.data, quantile = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers <- predict(models[[i]], new.data, type = "state")$predicted
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
result <- list(species = layers, diversity.raster = diversity.raster)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
x$models
x$models
x$models[[2]]
x$models[[3]]
x$models[[4]]
predict.diversity<- function(model, diverse, new.data, quantile = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers <- predict(models[[i]], new.data, type = "state")$predicted
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
result <- list(species = layers, diversity.raster = diversity.raster)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
a<-c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F)
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
predict.diversity<- function(model, diverse, new.data, quantile = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers[[i]] <- predict(models[[i]], new.data, type = "state")$predicted
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
result <- list(species = layers, diversity.raster = diversity.raster)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = a)
x$models[[1]]
names(plumas.stack)
colnames(x$Covs)
names(plumas.stack)==colnames(x$Covs)
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F))
predict.diversity<- function(model, diverse, new.data, quantile.nth = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$predicted
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
desition <- list(unstack(layers), diversity.raster)
for (i in 1:length(desition)){
nths <- quantile(desition[i], quantile.nth)
}
result <- list(species = layers, diversity.raster = diversity.raster)
return(result)
}
predict.diversity<- function(model, diverse, new.data, quantile.nth = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$predicted
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
desition <- list(unstack(layers), diversity.raster)
for (i in 1:length(desition)){
nths <- quantile(desition[i], quantile.nth)
}
result <- list(species = layers, diversity.raster = diversity.raster)
return(result)
}
predict.diversity2<- function(diverse, new.data, quantile.nth = 0.5) {
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
nths <- quantile(diversity.raster, quantile.nth)
m <- c(-Inf, nths, NA,  nths, Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc<-reclassify(new.data , rcl = rclmat)
result <- list(diversity.raster = diversity.raster, desition = rc)
return(result)
}
library("raster", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
z <- predict.diversity2(y, plumas.stack, quantile.nth = 0.8)
plot(z$diversity.raster)
plot(z$desition)
predict.diversity2<- function(diverse, new.data, quantile.nth = 0.5) {
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
nths <- quantile(diversity.raster, quantile.nth)
m <- c(-Inf, nths, NA,  nths, Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc<-reclassify(diversity.raster , rcl = rclmat)
result <- list(diversity.raster = diversity.raster, desition = rc)
return(result)
}
z <- predict.diversity2(y, plumas.stack, quantile.nth = 0.8)
plot(z$desition)
plot(z$desition, colNA = black)
plot(z$desition, colNA = "black")
plot(z$diversity.raster)
plot(z$desition, colNA = "black")
z <- predict.diversity2(y, plumas.stack, quantile.nth = 0.9)
plot(z$desition, colNA = "black")
z <- predict.diversity2(y, plumas.stack, quantile.nth = 0.9)
z <- predict.diversity2(y, plumas.stack, quantile.nth = 0.95)
plot(z$desition, colNA = "black")
y
x
x <- x
names(x)
models <- x$models[c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F)]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], plumas.stack, type = "state")$predicted
layers
}
models <- x$models[c(T,T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F)]
predict(models, plumas.stack, type = "state")$predicted
predict(unlist(models), plumas.stack, type = "state")$predicted
length(models)
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], plumas.stack, type = "state")
layers
}
layers
plot(layers)
plot(layers[[1]])
plot(layers[[1]]$predicted)
plot(layers[[1]])$predicted
(layers[[1]])$predicted
l;ayers
layers[[1]]
?subset
subset(layers, subset = 1)
subset(layers, subset = 1L)
subset(layers, 1)
subset(layers[[1]], 1)
plot(subset(layers[[1]], 1))
models <- x$models[c(T,T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F)]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], plumas.stack, type = "state")
layers [[i]] <- subset(layers[[i]], 1)
}
layers
plot(layers[[1]])
plot(layers[[2]])
predict.diversity<- function(model, diverse, new.data, quantile.nth = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
layers [[i]] <- subset(layers[[i]], 1)
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
desition <- list(unstack(layers), diversity.raster)
#for (i in 1:length(desition)){
# nths <- quantile(desition[i], quantile.nth)
#}
result <- list(species = layers, diversity.raster = diversity.raster, desition)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F))
plot(z$diversity.raster)
plot(z$species[[1]])
plot(z$species[[2]])
plot(z$``[[2]])
z$``
predict.diversity<- function(model, diverse, new.data, quantile.nth = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
layers [[i]] <- subset(layers[[i]], 1)
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
desition <- list(unstack(layers), diversity.raster)
#for (i in 1:length(desition)){
# nths <- quantile(desition[i], quantile.nth)
#}
result <- list(species = layers, diversity.raster = diversity.raster, desition = desition)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F))
z$desition
plot(z$desition[[1]])
z$desition[[1]]
class(z$desition[[1]])
class(z$desition[[2]])
plot(z$desition[[2]])
z$diversity.raster
plot(z$diversity.raster)
plot(z$species[[1]])
predict.diversity<- function(model, diverse, new.data, quantile.nth = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
layers [[i]] <- subset(layers[[i]], 1)
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
desition <- stack(unstack(layers), diversity.raster)
#for (i in 1:length(desition)){
# nths <- quantile(desition[i], quantile.nth)
#}
result <- list(species = layers, diversity.raster = diversity.raster, desition = desition)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F))
z$species
z$desition
plot(z$desition)
plot(z$diversity.raster)
?stack
predict.diversity<- function(model, diverse, new.data, quantile.nth = 0.5 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
layers [[i]] <- subset(layers[[i]], 1)
}
glm.model <- glm(diverse$Best_model, data = y$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack (unlist(layers))
desition <- addLayer(layers, diversity.raster)
#for (i in 1:length(desition)){
# nths <- quantile(desition[i], quantile.nth)
#}
result <- list(species = layers, diversity.raster = diversity.raster, desition = desition)
return(result)
}
z <- predict.diversity(model = x, diverse = y, plumas.stack, quantile = 0, species = c(T,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F,F))
