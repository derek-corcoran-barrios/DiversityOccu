A$data2
class(A$data2)
library(DiversityOccupancy)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
citation(package = "DiversityOccupancy")
library(DiversityOccupancy)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
B <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
B <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
B <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
install.packages("instalr")
library(DiversityOccupancy)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
?new.env
library(DiversityOccupancy)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
A <- diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
A <- batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov, obscov = Dailycov,
spp = 2, form = ~ Meanhum + Meantemp ~  Burn.intensity.basal +
I(Burn.intensity.basal^2), dredge = TRUE)
library(DiversityOccupancy)
citation(package = "DiversityOccupancy")
RSS
?RSS
library(DiversityOccupancy)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
BatOccupancy <-batchoccu(pres = BatOccu, sitecov = sampling.cov, obscov =
Dailycov,spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal + I(Burn.intensity.basal^2))
class(BatOccupancy)
library(DiversityOccupancy)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
data("plumas.stack")
#Model the abundance for 17 bat species and calculate alpha diversity from that
BatOccupancy <-batchyoccu(pres = BatOccu, sitecov = sampling.cov,
obscov = Dailycov,spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum +
sdtemp ~ Burn.intensity.soil + I(Burn.intensity.soil^2) +
Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
Occupancy.stack <- occupancy.predict(batch = BatOccupancy, new.data =
plumas.stack)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
data("plumas.stack")
#Model the abundance for 17 bat species and calculate alpha diversity from that
BatOccupancy <-batchoccu(pres = BatOccu, sitecov = sampling.cov,
obscov = Dailycov,spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum +
sdtemp ~ Burn.intensity.soil + I(Burn.intensity.soil^2) +
Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
Occupancy.stack <- occupancy.predict(batch = BatOccupancy, new.data =
plumas.stack)
library(DiversityOccupancy)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
data("plumas.stack")
#Model the abundance for 17 bat species and calculate alpha diversity from that
BatOccupancy <-batchoccu(pres = BatOccu, sitecov = sampling.cov,
obscov = Dailycov,spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum +
sdtemp ~ Burn.intensity.soil + I(Burn.intensity.soil^2) +
Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
Occupancy.stack <- occupancy.predict(batch = BatOccupancy, new.data =
plumas.stack)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
data("plumas.stack")
#Model the abundance for 17 bat species and calculate alpha diversity from that
BatOccupancy <-batchoccu(pres = BatOccu[,1:6], sitecov = sampling.cov,
obscov = Dailycov,spp = 2, form = ~ Julian + Meanhum + Meantemp + sdhum +
sdtemp ~ Burn.intensity.soil + I(Burn.intensity.soil^2) +
Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
Occupancy.stack <- occupancy.predict(batch = BatOccupancy, new.data =
plumas.stack)
plot(Occupancy.stack)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
data("plumas.stack")
#Model the abundance for 17 bat species and calculate alpha diversity from that
BatDiversity <-diversityoccu(pres = BatOccu, sitecov = sampling.cov,
obscov = Dailycov,spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum +
sdtemp ~ Burn.intensity.soil + I(Burn.intensity.soil^2) +
Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
data("BatOccu")
data("Dailycov")
data("sampling.cov")
data("plumas.stack")
#Model the abundance for 17 bat species and calculate alpha diversity from that
BatDiversity <-diversityoccu(pres = BatOccu[,1:6], sitecov = sampling.cov,
obscov = Dailycov,spp = 2, form = ~ Julian + Meanhum + Meantemp + sdhum +
sdtemp ~ Burn.intensity.soil + I(Burn.intensity.soil^2) +
Burn.intensity.Canopy + I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
#Select the best model that explains diversity using genetic algorithms
set.seed(123)
glm.Batdiversity <- model.diversity(BatDiversity, method = "g")
# get the area where the first two bat species Myyu and Myca are most abundant
# and the diversity is most abundant
Selected.area <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
?as.double
glm
library(DiversityOccupancy)
Selected.area <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
layers [[i]] <- subset(layers[[i]], 1)
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
return(layers)
}
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
return(layers)
}
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
subset
library(raster)
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
return(layers)
}
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")
}
return(layers)
}
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
BatDiversity$models
BatDiversity$models[[1]]
class(BatDiversity$models[[1]])
predict(BatDiversity$models[[1]], plumas.stack, type = "state")
predict(BatDiversity$models[[1]], plumas.stack, type = "state")$Predicted
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
return(layers)
}
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity,
gfds)
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity,
new.data = plumas.stack, quantile.nth = 0.85, species =
c(TRUE, FALSE))
Selected.area2
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
return(layers)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
return(layers)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
Selected.area2
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
return(desition)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
Selected.area2
class
class(Selected.area2)
names(Selected.area2)
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
nths <- quantile(desition, quantile.nth)
desition <- unstack(desition)
return(desition)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
Selected.area2
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
nths <- quantile(desition, quantile.nth)
desition <- unstack(desition)
rc<-list()
for (i in 1:length(nths)){
m <- c(-Inf, nths[i], NA,  nths[i], Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc[[i]]<-reclassify(desition[[i]] , rcl = rclmat)
}
return(rc)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
Selected.area2
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
nths <- quantile(desition, quantile.nth)
desition <- unstack(desition)
rc<-list()
for (i in 1:length(nths)){
m <- c(-Inf, nths[i], NA,  nths[i], Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc[[i]]<-reclassify(desition[[i]] , rcl = rclmat)
}
rc<- stack(unlist(rc))
priority.area <- prod(rc)
plot(priority.area, colNA="black", legend = FALSE)
KML(priority.area, file='priority_area.kml', overwrite = TRUE)
result <- list(species = layers, diversity.raster = diversity.raster, priority.area = priority.area)
return(result)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
nths <- quantile(desition, quantile.nth)
desition <- unstack(desition)
rc<-list()
for (i in 1:length(nths)){
m <- c(-Inf, nths[i], NA,  nths[i], Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc[[i]]<-reclassify(desition[[i]] , rcl = rclmat)
}
rc<- stack(unlist(rc))
priority.area <- prod(rc)
plot(priority.area, colNA="black", legend = FALSE)
KML(priority.area, file='priority_area.kml', overwrite = TRUE, col = "red")
result <- list(species = layers, diversity.raster = diversity.raster, priority.area = priority.area)
return(result)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
library(DiversityOccupancy)
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
nths <- quantile(desition, quantile.nth)
desition <- unstack(desition)
rc<-list()
for (i in 1:length(nths)){
m <- c(-Inf, nths[i], NA,  nths[i], Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc[[i]]<-reclassify(desition[[i]] , rcl = rclmat)
}
rc<- stack(unlist(rc))
priority.area <- prod(rc)
plot(priority.area, colNA="black", legend = FALSE)
KML(priority.area, file='priority_area.kml', overwrite = TRUE, col = "red")
result <- list(species = layers, diversity.raster = diversity.raster, priority.area = priority.area)
return(result)
}
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumas.stack, quantile.nth = 0.85, species = c(TRUE, FALSE))
glm.Batdiversity
names(glm.Batdiversity)
glm.Batdiversity$Best_model
class(glm.Batdiversity$Best_model)
attr(glm.Batdiversity$Best_model)
typeof(glm.Batdiversity$Best_model)
plumas.stack
library(raster)
plot(plumas.stack[[1]])
drawExtent()
plot(plumas.stack[[1]])
e<-drawExtent()
plumitas <-crop(plumas.stack, e)
plot(plumitas)
diversity.predict2<- function(model, diverse, new.data, quantile.nth = 0.8 , species) {
models <- model$models[species]
layers <- list()
for (i in 1:length(models)){
layers [[i]] <- predict(models[[i]], new.data, type = "state")$Predicted
}
glm.model <- glm(diverse$Best_model, data = diverse$dataset)
diversity.raster<- predict(object = new.data, model = glm.model)
layers <- stack(unlist(layers))
desition <- addLayer(layers, diversity.raster)
nths <- quantile(desition, quantile.nth)
desition <- unstack(desition)
rc<-list()
for (i in 1:length(nths)){
m <- c(-Inf, nths[i], NA,  nths[i], Inf, 1)
rclmat <- matrix(m, ncol=3, byrow=TRUE)
rc[[i]]<-reclassify(desition[[i]] , rcl = rclmat)
}
rc<- stack(unlist(rc))
priority.area <- prod(rc)
plot(priority.area, colNA="black", legend = FALSE)
KML(priority.area, file='priority_area.kml', overwrite = TRUE, col = "red")
result <- list(species = layers, diversity.raster = diversity.raster, priority.area = priority.area)
return(result)
}
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumitas, quantile.nth = 0.85, species = c(TRUE, FALSE))
plumitas
?brick
stack(plumitas)
plumitas<-stack(plumitas)
plot(plumitas)
Selected.area2 <- diversity.predict2(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumitas, quantile.nth = 0.85, species = c(TRUE, FALSE))
library(DiversityOccupancy)
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumitas, quantile.nth = 0.85, species = c(TRUE, FALSE))
typeof(glm.Batdiversity$Best_model)
typeof(plumitas)
library(DiversityOccupancy)
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumitas, quantile.nth = 0.85, species = c(TRUE, FALSE))
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumitas, quantile.nth = 0.85, species = c(TRUE, FALSE))
Selected.area2 <- diversity.predict(model = BatDiversity, diverse = glm.Batdiversity, new.data = plumitas, quantile.nth = 0.85, species = c(TRUE, FALSE))
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library(DiversityOccupancy)
library("DiversityOccupancy", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:DiversityOccupancy", unload=TRUE)
?saveRDS
agrofo <- readRDS("Agrofo.rds")
plot(agrofo)
agrofo
plot(agrofo)
library(rasterVis)
histogram(agrofo)
histogram(agrofo, xlim(0,4))
histogram(agrofo, xlim= c(0,4))
histogram(agrofo, ylim= c(0,4))
library(rgdal)
library(raster)
agrofo <- readRDS("Agrofo.rds")
plot(agrofo)
agrofo
?getData
mic <- getData('alt', country='FSM', mask=TRUE)
plot(mic)
?projection
extent(agrofo)
mic2<- projectRaster(mic, agrofo)
mic2
plot(mic2)
agrofo
IslandStack<- stack(agrofo, mic2)
plot(IslandStack)
uno <- agrofo/agrofo
plot(uno*mic2)
plot(uno)
rm(uno)
rm(mic)
plot(IslandStack)
SecVec <- readRDS("SecVec.rds")
plot(SecVec)
library(rasterVis)
histogram(SecVec)
histogram(SecVec, ylim = c(0,4))
?histogram
IslandStack<- stack(agrofo, SecVec,mic2)
plot(IslandStack)
names(IslandStack) <- c("Agrofo", "SecVec", "Elevation")
plot(IslandStack)
a<- mean(agrofo, mic2, SecVec)
plot(a)
plot(IslandStack)
plot3D(mic2)
names(IslandStack) <- c("AgroFo", "SecVec", "Elev")
save(IslandStack,file="IslandStack.Rda")
