y$Table
y$dataset
glm(y$Best_model, data= y$dataset
)
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset)
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset)
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE)
names(predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE))
names(predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE))[[1]]
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE)[[1]]
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE)[[2]]
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE)[[1]]
predict(glm(y$Best_model, data= y$dataset), newdata = y$dataset, se.fit = TRUE)[[2]]
sampling.cov
mean(sampling.cov)
colMeans(sampling.cov)
rep(colMeans(sampling.cov), times=length(sampling.cov[,1])
)
rep(colMeans(sampling.cov), times=length(sampling.cov[,1]))
a<-rep(colMeans(sampling.cov), times=length(sampling.cov[,1]))
class(a)
length(sampling.cov[,1])
?matrix
a<-matrix(rep(colMeans(sampling.cov), times=length(sampling.cov[,1])), nrow = length(sampling.cov[,1]), ncol = ncol(sampling.cov))
a
rep?
dgdasg
?rep
a<-matrix(rep(colMeans(sampling.cov), each=length(sampling.cov[,1])), nrow = length(sampling.cov[,1]), ncol = ncol(sampling.cov))
a
View(a)
a<-data.frame(matrix(rep(colMeans(sampling.cov), each=length(sampling.cov[,1])), nrow = length(sampling.cov[,1]), ncol = ncol(sampling.cov)))
colnames(a)<-colnames(sampling.cov)
min(y$dataset)
summary(y$dataset)
names(summary(a))
names(summary(y$dataset))
summary(y$dataset)
summary(y$dataset)$min
summary(y$dataset)@min
class(y$dataset)
(y$dataset[6,])
(y$dataset[1,])
length(y$dataset[,1])
length(summary(y$dataset[,1]))
(summary(y$dataset[,1])
)
y$dataset[6,]
y$dataset[1,]
summary(y$dataset[1,])
(y$dataset[6,])
summary(y$dataset)
summary(y$dataset)[1,]
class(summary(y$dataset)[1,])
class(summary(y$dataset)[1,])
summary(y$dataset)[1,]
class(summary(y$dataset))
str(summary(y$dataset))
class(table)
table
as.numeric(summary(y$dataset)[1,])
summary(y$dataset)[1,]
apply(sampling.cov,2,min)
apply(sampling.cov,2,max)
class(apply(sampling.cov,2,max))
maxval<-apply(sampling.cov,2,max)
maxval
maxval$Basal.Area
names(maxval)
maxval@Basal.Area
maxval[6]
maxval[6]*4
maxval[6]
maxval$names
maxval$name
summary(maxval)
colnames(a)
colnames(a)=="Altitude"
maxval[colnames(a)=="Altitude"]
?seq
rm(a)
rm(b)
y
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(variable)], to = minval[colnames(a)== as.character(variable)], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
result <-list(newdata= a, prediction = b)
return(result)
}
responce.plot(y, Altitude)
responce.plot(y, Altitude)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
return(a)}
responce.plot(y, Altitude)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
return(a)}
responce.plot(y, Altitude)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)result <-list(newdata= a, prediction = minval)
return(result)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)  result <-list(newdata= a, prediction = minval)
return(result)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
result <-list(newdata= a, prediction = maxval)
return(result)
}
responce.plot(y, Altitude)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
result <-list(newdata= a, prediction = maxval, variable = as.character(variable))
return(result)
}
responce.plot(y, Altitude)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
result <-list(newdata= a, prediction = maxval, variable = as.character(variable))
return(result)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
result <-list(newdata= a, prediction = maxval, variable = as.character(variable))
return(result)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
c<- as.character(variable)
result <-list(newdata= a, prediction = maxval, variable = c)
return(result)
}
responce.plot(y, Altitude)
responce.plot(y, variable = Altitude)
sample(c(1,2,3),1)
sample(c(1,2,3),1)
bla <- function(a, b){
c<-paste(as.character(a), as.character(b))
return(c)
}
bla(hello, bitch)
bla(a, b)
bla <- function(a, b){
c<-as.character(a)
return(c)
}
bla(hello)
as.character(hello)
as.character(as.factor(hello))
as.character("hello")
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
c<- as.character("variable")
result <-list(newdata= a, prediction = maxval, variable = c)
return(result)
}
bla <- function(a, b){
c<-as.character(a)
return(c)
}
bla <- function(a){
c<-as.character(a)
return(c)
}
bla <- function(a){
c<-as.character("a")
return(c)
}
bla(hello)
responce.plot(y, variable = Altitude)
responce.plot(y, variable = Altitude)
bla <- function(a){
c<-as.character("a")
return(c)
}
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
c<- as.character("variable")
result <-list(newdata= a, prediction = maxval, variable = c)
return(result)
}
responce.plot(y, variable = Altitude)
?substitute
substiture)altitude
substiture(altitude)
substitute(altitude)
as.character(substitute(altitude))
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
c<- as.character(substitute(variable))
result <-list(newdata= a, prediction = maxval, variable = c)
return(result)
}
responce.plot(y, variable = Altitude)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = minval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
result <-list(newdata= a, prediction = b)
return(result)
}
responce.plot(y, variable = Altitude)
library(DiversityOccupancy)
?model.diversity
data("BatOccu")
data("Dailycov")
data("sampling.cov")
x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
y <- model.diversity(x, method = "g")
y$Table
responce.plot(y, Burn.intensity.soil)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = minval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
result <-list(newdata= a, prediction = b)
return(result)
}
responce.plot(y, Burn.intensity.soil)
z<-responce.plot(y, Burn.intensity.soil)
names(z)
z$prediction
z$prediction$fit
z$prediction$se
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = minval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
result <-list(newdata= a, prediction = b, new = newdata)
return(result)
}
z<-responce.plot(y, Burn.intensity.soil)
z$new
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
result <-list(newdata= a, prediction = b, new = newdata)
return(result)
}
z<-responce.plot(y, Burn.intensity.soil)
z$new
z$newdata
colnames(z$newdata)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se))
result <-list(c)
return(result)
}
z<-responce.plot(y, Burn.intensity.soil)
z
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se), dependent = a$variable)
result <-list(c)
return(result)
}
z
z<-responce.plot(y, Burn.intensity.soil)
z
summary(z)
str(z)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a$variable <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se), dependent = a$variable)
result <-list(c, new = a)
return(result)
}
z<-responce.plot(y, Burn.intensity.soil)
str(z)
z$new
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a[colnames(a)== as.character(substitute(variable))] <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se), dependent = a$variable)
result <-list(c, new = a)
return(result)
}
z<-responce.plot(y, Burn.intensity.soil)
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a[colnames(a)== as.character(substitute(variable))] <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se), dependent = a[colnames(a)== as.character(substitute(variable))])
result <-list(c, new = a)
return(result)
}
z<-responce.plot(y, Burn.intensity.soil)
z
z$``
z
responce.plot<- function(model, variable){
a<-data.frame(matrix(rep(colMeans(model$dataset), each=length(model$dataset[,1])), nrow = length(model$dataset[,1]), ncol = ncol(model$dataset)))
colnames(a)<-colnames(model$dataset)
maxval<-apply(model$dataset,2,max)
minval<-apply(model$dataset,2,min)
newdata<- seq(from = minval[colnames(a)== as.character(substitute(variable))], to = maxval[colnames(a)== as.character(substitute(variable))], along.with = model$dataset[,1])
a[colnames(a)== as.character(substitute(variable))] <- newdata
b<-predict(glm(model$Best_model, data= model$dataset), newdata = a, se.fit = TRUE)
c<- data.frame(preditction = b$fit, upper = (b$fit + b$se), lower = (b$fit - b$se), dependent = a[colnames(a)== as.character(substitute(variable))])
result <-list(c = c, new = a)
return(result)
}
c
z<-responce.plot(y, Burn.intensity.soil)
z
z$c
z$new
z$c
library(DiversityOccupancy)
z<-responce.plot(y, Burn.intensity.soil)
z
z<-responce.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
data("BatOccu")
data("Dailycov")
data("sampling.cov")
x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
y <- model.diversity(x, method = "g")
y$Table
z<-responce.plot(y, Burn.intensity.soil)
z<-response.plot(y, Burn.intensity.soil)
?ggplot
?aes
library(DiversityOccupancy)
z<-response.plot(y, Burn.intensity.soil)
z
response.plot(y, Burn.intensity.soil)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
y$Best_model
response.plot(y, Burn.intensity.Canopy)
response.plot(y, Existing.vegetation)
z<-response.plot(y, Existing.vegetation)
z
z+theme_bw()
library("ggplot2", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
z+theme_bw()
detach("package:ggplot2", unload=TRUE)
library(DiversityOccupancy)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.Canopy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
response.plot(y, Burn.intensity.Canopy)
response.plot(y, Existing.vegetation)
library(DiversityOccupancy)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.Canopy)
response.plot(y, Burn.intensity.soil)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.soil)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.soil)
y$Best_model
library(DiversityOccupancy)
library(DiversityOccupancy)
response.plot(y, Burn.intensity.soil)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.soil)
response.plot(y, Burn.intensity.Canopy)
z
z<-response.plot(y, Burn.intensity.Canopy)
z
data("BatOccu")
data("Dailycov")
data("sampling.cov")
View(BatOccu)
View(sampling.cov)
View(Dailycov)
x <-diversityoccu(pres = BatOccu, sitecov = sampling.cov, obscov = Dailycov,
spp = 17, form = ~ Julian + Meanhum + Meantemp + sdhum + sdtemp ~
Burn.intensity.soil + I(Burn.intensity.soil^2) + Burn.intensity.Canopy +
I(Burn.intensity.Canopy^2) + Burn.intensity.basal +
I(Burn.intensity.basal^2))
x
names(x)
x$Covs
x$models
x$Diversity
x$Covs
names(x$Covs)
y <- model.diversity(x, method = "g")
y
names(y)
y$Best_model
y$Table
y$coeff
y$dataset
y$Best_model
response.plot(y, Burn.intensity.Canopy)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.soil)
response.plot(y, Burn.intensity.basal)
response.plot(y, Burn.intensity.soil)
response.plot(y, Burn.intensity.basal)
response.plot(y, Existing.vegetation)
response.plot(y, Burn.intensity.soil)
