(Test$models[[1]]@estimates@estimates$state@estimates)[-1]
names(Test$models[[1]]@estimates@estimates$state@estimates)[-1]
Test$Covs %>% select(Cosos)
Test$Covs %>% select(Cosos) %>% class()
Test$Covs %>% select(Cosos) %>% group_by_if(is.character) %>% summarise_all(mean)
Test$Covs %>% select(Cosos) %>% group_by_if(is.character) %>% summarise_all(mean)
Test$Covs %>% select(Cosos) %>% group_by_if(is.character) %>% summarise_all(mean)
library(tidyverse)
library(tidyverse)
batch = Test
spp = 1
variable = "Distancia_Costa"
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A
do
?do
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup() %>% do(data.frame(column = rep(.$column, each = 20), stringsAsFactors = FALSE))
A
?dplyr::add_row()
A[rep(seq_len(nrow(A)), each = 2), ]
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A
A[rep(seq_len(nrow(A)), each = 2), ]
A[rep(seq_len(nrow(A)), each = 20), ]
A <- A[rep(seq_len(nrow(A)), each = 20), ]
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
A
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
MinMax <- batch$Covs %>% select(variable) %>% summarise_if(is.numeric, .f = c(min, max)) %>% distinct()
MinMax
variable
dplyr::vars(variable)
select(A, dplyr::vars(variable))
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
MinMax <- batch$Covs %>% select(variable) %>% summarise_if(is.numeric, .f = c(min, max)) %>% distinct()
A %>% mutate(variable = "A")
Test <- batchoccu(pres = Spp, sitecov = OccuCov, obscov = DetCov, spp = 6, form =~ Temperatura + Humedad + Presencia_perros ~AMBIENTE + CobVeg + Distancia_rio + Distancia_Costa , dredge = T, SppNames = c("Aguilucho", "Blanquillo", "Chercan", "Chincol", "Churrete_Chico", "Churrete_comun"))
A$CobVeg
A
Test
Test$models
Test$models$Churrete_comun
library(DiversityOccupancy)
Spp <- readRDS("/home/derek/Documents/DataYuryi/data_reg6sp.rds")
OccuCov <- readRDS("/home/derek/Documents/DataYuryi/Occdata_ocu.rds")
DetCov <- readRDS("/home/derek/Documents/DataYuryi/Occdata_det.rds")
Test <- batchoccu(pres = Spp, sitecov = OccuCov, obscov = DetCov, spp = 6, form =~ Temperatura + Humedad + Presencia_perros ~AMBIENTE + CobVeg + Distancia_rio + Distancia_Costa , dredge = T, SppNames = c("Aguilucho", "Blanquillo", "Chercan", "Chincol", "Churrete_Chico", "Churrete_comun"))
Test$models[[1]]
Test$models$Blanquillo
Test2 <- batchoccu(pres = Spp, sitecov = OccuCov, obscov = DetCov, spp = 6, form =~ Temperatura ~AMBIENTE + CobVeg + Distancia_Costa , dredge = F, SppNames = c("Aguilucho", "Blanquillo", "Chercan", "Chincol", "Churrete_Chico", "Churrete_comun"))
Test2$models
head(OccuCov)
Test2$models[[1]]
batch = Test2
spp = 1
variable = "Distancia_Costa"
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
library(tidyverse)
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
View(A)
batch = Test2
Cosos
library(tidyverse)
batch = Test2
spp = 1
variable = "Distancia_Costa"
Vars <- Cosos <- names(batch$models[[spp]]@estimates@estimates$state@estimates)[-1]
A <- batch$Covs %>% select(Cosos) %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Vars <- names(batch$models[[spp]]@estimates@estimates$state@estimates)[-1]
Vars
batch$models[[spp]]@estimates@estimates$state@estimates
batch
batch$Covs
head(batch$Covs)
A <- batch$Covs  %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A
batch$models[[1]]$state
batch$models[[1]]@call
batch$models[[1]]@call
batch$models[[1]]@estimates
batch$models[[1]]@estimates$state
batch$models[[1]]@estimates@estimates
batch$models[[1]]@estimates@estimates$state
batch$models[[1]]
batch$models[[1]]@knownOcc
batch$models[[1]]@fitType
batch$models[[1]]@call
batch$models[[1]]@formula
batch$models[[1]]@formula %>% str_split(pattern = "~")
batch$models[[1]]@formula %>% str_split(pattern = "~") %>% .[3]
batch$models[[1]]@formula %>% str_split(pattern = "~") %>% .[3] %>% str_split("+")
batch$models[[1]]@formula %>% str_split(pattern = "~") %>% .[3] %>% str_split(pattern = "+")
batch$models[[1]]@formula %>% str_split(pattern = "~") %>% .[3] %>% str_split(pattern = "\\+")
batch$models[[1]]@formula %>% str_split(pattern = "~") %>% .[3] %>% str_split(pattern = "\\+", simplify = T)
Vars <- batch$models[[1]]@formula %>% str_split(pattern = "~") %>% .[3] %>% str_split(pattern = "\\+", simplify = T)
Vars
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T)
Vars
class(Vars)
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character()
class(Vars)
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
batch$Covs %>% select(Vars)
rlang::last_error()
Vars
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
Vars
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% summarise_if(is.numeric, mean)
A
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
A
View(A)
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% summarise_each(funs(if(is.numeric(.)) mean(., na.rm = TRUE) else first(.))
)
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% summarise_each(funs(if(is.numeric(.)) mean(., na.rm = TRUE) else first(.)) )
a
A
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% summarise_each(funs(if(is.numeric(.)) mean(., na.rm = TRUE) else unique(.)) )
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% summarise_each(funs(if(is.numeric(.)) mean(., na.rm = TRUE) else first(.)) )
A
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character()) %>% summarise_if(is.numeric, mean) %>% ungroup()
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
Vars
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean)
A
View(A)
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character)
A
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
A
View(A)
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A
20*nrow(A)
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character)
A
View(A)
A$AMBIENTE
A$AMBIENTE
A$AMBIENTE
A$AMBIENTE
A$AMBIENTE
library(tidyverse)
library(DiversityOccupancy)
Spp <- readRDS("/home/derek/Documents/DataYuryi/data_reg6sp.rds")
OccuCov <- readRDS("/home/derek/Documents/DataYuryi/Occdata_ocu.rds")
DetCov <- readRDS("/home/derek/Documents/DataYuryi/Occdata_det.rds")
#Test <- batchoccu(pres = Spp, sitecov = OccuCov, obscov = DetCov, spp = 6, form =~ Temperatura + Humedad + Presencia_perros ~AMBIENTE + CobVeg + Distancia_rio + Distancia_Costa , dredge = T, SppNames = c("Aguilucho", "Blanquillo", "Chercan", "Chincol", "Churrete_Chico", "Churrete_comun"))
Test2 <- batchoccu(pres = Spp, sitecov = OccuCov, obscov = DetCov, spp = 6, form =~ Temperatura ~AMBIENTE + CobVeg + Distancia_Costa , dredge = F, SppNames = c("Aguilucho", "Blanquillo", "Chercan", "Chincol", "Churrete_Chico", "Churrete_comun"))
batch = Test2
spp = 1
variable = "Distancia_Costa"
upper <- lower <- NULL
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character) %>% group_split()
Categoricals <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% select_if(is.character) %>% colnames()
Categoricals
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
Categoricals <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% select_if(is.character) %>% colnames()
Vars <- batch$models[[spp]]@formula %>% str_split(pattern = "~", simplify = T) %>% .[3] %>% str_split(pattern = "\\+", simplify = T) %>% as.character() %>% str_trim()
Categoricals <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% select_if(is.character) %>% colnames()
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character) %>% group_split(Categoricals)
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character) %>% group_split(Categoricals)
dplyr::vars(Categoricals)
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character) %>% group_split(dplyr::vars(Categoricals))
A <- batch$Covs %>% select(Vars)  %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
A <- A[rep(seq_len(nrow(A)), each = 20), ]  %>% arrange_if(is.character) %>% group_split(quo(Categoricals))
?group_split
data("Titanic")
View(Titanic)
?mtcars
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual"))
View(mt2)
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
head(mt2)
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
model1 <- lm(mpg ~ wt + hp, data = mt2)
model1$coefficients
model1$call
model1$model
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
model1 <- lm(mpg ~ wt + hp, data = mt2)
Plot_Response <- function(Model){
# generate a data.frame with all the means copied 20 times
Means <- model1$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20), ]
return(Means)
}
Plot_Response(Model = model1)
Plot_Response <- function(Model){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20), ]
return(Means)
}
Plot_Response(Model = model1)
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20), ]
MinMax <- Model$model %>% select(variable) %>% pull %>% range()
return(Means, MinMax)
}
Plot_Response(Model = model1, variable = "wt")
Model = model1
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20), ]
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
model1 <- lm(mpg ~ wt + hp, data = mt2)
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20), ]
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
return(Means, MinMax)
}
Plot_Response(Model = model1, variable = "wt")
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20), ]
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
return(list(Means = Means, MinMax = MinMax))
}
Plot_Response(Model = model1, variable = "wt")
?seq_along()
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
model1 <- lm(mpg ~ wt + hp, data = mt2)
Model = model1
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
variable = "wt"
variable = "wt"
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
MinMax
Means[colnames(Means)== as.character(substitute(variable))] <- MinMax
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
Means[colnames(Means)== as.character(substitute(variable))]
colnames(Means)
as.character(substitute(variable))
variable
Means[colnames(Means)== as.character(variable)] <- MinMax
Means
B$Predicted <-predict(Model, newdata = Means)
B$SE <- predict(Model, newdata = Means, se.fit = T)  B$Predicted <-predict(Model, newdata = Means)
B$SE <- predict(Model, newdata = Means, se.fit = T)
Means$Predicted <-predict(Model, newdata = Means)
Means$SE <- predict(Model, newdata = Means, se.fit = T)
predict(Model, newdata = Means, se.fit = T)
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
Means[colnames(Means)== as.character(variable)] <- MinMax
Means$Predicted <-predict(Model, newdata = Means)
Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
Means
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
model1 <- lm(mpg ~ wt + hp, data = mt2)
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
Means[colnames(Means)== as.character(variable)] <- MinMax
Means$Predicted <-predict(Model, newdata = Means)
Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
result <- ggplot(Means, aes_string(x= variable, y = Predicted)) + geom_ribbon(aes(ymax= Predicted + SE, ymin = Predicted - SE), fill = "grey") + geom_line() + theme_classic()
return(result)
}
Plot_Response(Model = model1, variable = "wt")
model1 <- lm(mpg ~ wt + hp, data = mt2)
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
###############
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
Means[colnames(Means)== as.character(variable)] <- MinMax
Means$Predicted <-predict(Model, newdata = Means)
Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
result <- ggplot(Means, aes_string(x= variable, y = "Predicted")) + geom_ribbon(aes(ymax= Predicted + SE, ymin = Predicted - SE), fill = "grey") + geom_line() + theme_classic()
return(result)
}
Plot_Response(Model = model1, variable = "wt")
Plot_Response(Model = model1, variable = "wt")
model1 <- lm(mpg ~ wt + hp + am, data = mt2)
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
model1 <- lm(mpg ~ wt + hp, data = mt2)
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
# Then generate a vector with a sequence from the min value to the max value of the variable
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
# Replace the column of the variable that we need to plot the response plot of by this sequence
Means[colnames(Means)== as.character(variable)] <- MinMax
## Predict the fit and SE
Means$Predicted <-predict(Model, newdata = Means)
Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
## Plot the response
result <- ggplot(Means, aes_string(x= variable, y = "Predicted")) + geom_ribbon(aes(ymax= Predicted + SE, ymin = Predicted - SE), fill = "grey") + geom_line() + theme_classic()
return(result)
}
Plot_Response(Model = model1, variable = "wt")
### but if there is a categorical variable we will have a problem that there is no mean value for that variable in this example it would be am
model2 <- lm(mpg ~ wt + hp + am, data = mt2)
model2
Plot_Response(Model = model2, variable = "wt")
?reprex
library(tidyverse)
data("mtcars")
mt2 <- mtcars %>% mutate(am = case_when(am == 0 ~ "Automatic", am == 1 ~ "Manual")) %>% select(mpg, am, wt, hp)
model1 <- lm(mpg ~ wt + hp, data = mt2)
Plot_Response <- function(Model, variable){
# generate a data.frame with all the means copied 20 times
Means <- Model$model %>% summarise_all(mean)
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]
# Then generate a vector with a sequence from the min value to the max value of the variable
MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
# Replace the column of the variable that we need to plot the response plot of by this sequence
Means[colnames(Means)== as.character(variable)] <- MinMax
## Predict the fit and SE
Means$Predicted <-predict(Model, newdata = Means)
Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
## Plot the response
result <- ggplot(Means, aes_string(x= variable, y = "Predicted")) + geom_ribbon(aes(ymax= Predicted + SE, ymin = Predicted - SE), fill = "grey") + geom_line() + theme_classic()
return(result)
}
Plot_Response(Model = model1, variable = "wt")
model2 <- lm(mpg ~ wt + hp + am, data = mt2)
Plot_Response(Model = model2, variable = "wt")
Plot_Response2 <- function(Model, variable){
# First I get the names of all categorical variables
Categoricals <- Model$model %>% mutate_if(is.factor, as.character) %>% select_if(is.character) %>% colnames()
# generate a data.frame with all the means copied 20 times for each level
Means <- Model$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(variable)
# Then generate a vector with a sequence from the min value to the max value of the variable
#MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
#MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
# Replace the column of the variable that we need to plot the response plot of by this sequence
#Means[colnames(Means)== as.character(variable)] <- MinMax
## Predict the fit and SE
#Means$Predicted <-predict(Model, newdata = Means)
#Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
## Plot the response
#result <- ggplot(Means, aes_string(x= variable, y = "Predicted")) + geom_ribbon(aes(ymax= Predicted + SE, ymin = Predicted - SE), fill = "grey") + geom_line() + theme_classic()
return(Means)
}
Plot_Response2(Model = model2, variable = "wt")
Plot_Response2 <- function(Model, variable){
# First I get the names of all categorical variables
Categoricals <- Model$model %>% mutate_if(is.factor, as.character) %>% select_if(is.character) %>% colnames()
# generate a data.frame with all the means copied 20 times for each level
Means <- Model$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(substitute(variable))
# Then generate a vector with a sequence from the min value to the max value of the variable
#MinMax <- Model$model %>% select(variable) %>% pull(variable) %>% range()
#MinMax <- seq(from = MinMax[1], to = MinMax[2], along.with = Means[,1])
# Replace the column of the variable that we need to plot the response plot of by this sequence
#Means[colnames(Means)== as.character(variable)] <- MinMax
## Predict the fit and SE
#Means$Predicted <-predict(Model, newdata = Means)
#Means$SE <- predict(Model, newdata = Means, se.fit = T)$se.fit
## Plot the response
#result <- ggplot(Means, aes_string(x= variable, y = "Predicted")) + geom_ribbon(aes(ymax= Predicted + SE, ymin = Predicted - SE), fill = "grey") + geom_line() + theme_classic()
return(Means)
}
Plot_Response2(Model = model2, variable = "wt")
?split
?purrr::map()
model2 <- lm(mpg ~ wt + hp + am, data = mt2)
Plot_Response(Model = model2, variable = "wt")
Categoricals <- model2$model %>% mutate_if(is.factor, as.character) %>% select_if(is.character) %>% colnames()
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(am)
Means
str(Means)
length(Means)
MinMax <- Model$model %>% select(wt) %>% pull(wt) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], length.out =  = 20)
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(am)
MinMax <- Model$model %>% select(wt) %>% pull(wt) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], length.out =  = 20)
for(i in 1:length(Means)){
Means[[i]]$wt <- MinMax
}
Means <- bind_rows(Means)
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(am)
MinMax <- Model$model %>% select(wt) %>% pull(wt) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], length.out =  = 20)
for(i in 1:length(Means)){
Means[[i]]$wt <- MinMax
}
Means <- bind_rows(Means) %>% mutate(Predicted = predict(model2, Means), SE = predict(model2, Means, se.fit = T)$se.fit)
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(am)
MinMax <- Model$model %>% select(wt) %>% pull(wt) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], length.out =  = 20)
for(i in 1:length(Means)){
Means[[i]]$wt <- MinMax
}
Means <- bind_rows(Means)
Means$Predicted <- predict(model2, Means)
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(am)
MinMax <- model2$model %>% select(wt) %>% pull(wt) %>% range()
MinMax <- seq(from = MinMax[1], to = MinMax[2], length.out =  = 20)
MinMax <- model2$model %>% select(wt) %>% pull(wt) %>% range()
MinMax
MinMax <- seq(from = MinMax[1], to = MinMax[2], length.out = 20)
for(i in 1:length(Means)){
Means[[i]]$wt <- MinMax
}
Means <- bind_rows(Means)
Means$Predicted <- predict(model2, Means)
Means
Means$SE <- predict(model2, Means, se.fit = T)$se.fit
Means
ggplot(Means, aes(x = wt, y = Predicted)) + geom_ribbon(aes(ymax = Predicted + SE, ymin = Predicted - SE, fill = am)) + geom_line(aes(fill = am))
ggplot(Means, aes(x = wt, y = Predicted)) + geom_ribbon(aes(ymax = Predicted + SE, ymin = Predicted - SE, fill = am)) + geom_line(aes(color = am)) + theme_classic()
ggplot(Means, aes(x = wt, y = Predicted)) + geom_ribbon(aes(ymax = Predicted + SE, ymin = Predicted - SE, fill = am)) + geom_line(aes(group = am)) + theme_classic()
ggplot(Means, aes(x = wt, y = Predicted)) + geom_ribbon(aes(ymax = Predicted + SE, ymin = Predicted - SE, fill = am), alpha = 0.5) + geom_line(aes(color = am)) + theme_classic()
Means <- model2$model %>% mutate_if(is.factor, as.character) %>% mutate_if(is.numeric, mean) %>% group_by_if(is.character) %>% summarise_if(is.numeric, mean) %>% ungroup()
Means <- Means[rep(seq_len(nrow(Means)), each = 20),]  %>% arrange_if(is.character) %>% group_split(am)
Means <- bind_rows(Means)
Means$Predicted <- predict(model2, Means)
Means$SE <- predict(model2, Means, se.fit = T)$se.fit
ggplot(Means, aes(x = am, y = Predicted)) + geom_boxplot() + theme_classic()
ggplot(Means, aes(x = am, y = Predicted)) + geom_errorbar(aes(ymin = Predicted - SE, ymax = Predicted + SE)) + geom_point() + theme_classic()
usethis::use_pkgdown()
pkgdown::build_site()
pkgdown::build_news()
usethis::use_travis()
usethis::use_travis()
usethis::use_travis()
usethis::use_travis()
pkgdown::build_site()
pkgdown::build_site()
?usethis::use_travis()
usethis::use_badge()
?usethis::use_badge()
usethis::use_cran_badge()
usethis::use_lifecycle_badge()
usethis::use_lifecycle_badge(stage = "Stable")
?usethis::use_badge()
usethis::use_badge()
pkgdown::build_site()
usethis::use_lifecycle_badge(stage = "Stable")
usethis::use_cran_badge()
usethis::use_lifecycle_badge(stage = "Stable")
pkgdown::build_site()
usethis::use_gitlab_ci()
usethis::use_gitlab_ci()
?usethis::use_gitlab_ci()
usethis::use_travis()
usethis::use_travis()
usethis::use_travis()
usethis::use_travis()
